/*=============================================================================
  Chikashi.S Templete
  ユーティリティ辞書
  Last up date: 2014/04/27
=============================================================================*/

/*-----------------------------------------------------------------------------
  YAYAオプション機能郡の名前の短縮
-----------------------------------------------------------------------------*/
EscapeAllTags {SHIORI3FW.EscapeAllTags(_argv)}
EscapeDangerousTags {SHIORI3FW.EscapeDangerousTags(_argv)}
IsGhostExist {SHIORI3FW.IsGhostExist(_argv)}
RefreshFMOTable {SHIORI3FW.RefreshFMOTable(_argv)}
FMOCache {SHIORI3FW.FMOCache}
SetDelayEvent {SHIORI3FW.SetDelayEvent(_argv)}
EscapeText {AYATEMPLATE.EscapeText(_argv)}

/*-----------------------------------------------------------------------------
  エスケープ
  さくらスクリプトの中に「]」を記述したい時等に使用
-----------------------------------------------------------------------------*/
AYATEMPLATE.EscapeText
{
	_r = _argv[0]
	if RE_SEARCH(_r,'[,"\[\]]') {
		'"' + REPLACE(_r,'"','""') + '"'
	}
	else {
		_r
	}
}

/*-----------------------------------------------------------------------------
  関数・変数・さくらスクリプト置換
-----------------------------------------------------------------------------*/
#globaldefine @hn \w9\w9\n\n[half]

#globaldefine ◆ %*
#globaldefine <b> \f[bold,true]
#globaldefine </b> \f[bold,false]
#globaldefine <u> \f[underline,true]
#globaldefine </u> \f[underline,false]
#globaldefine <i> \f[italic,true]
#globaldefine </i> \f[italic,false]
#globaldefine @checkOn ◉
#globaldefine @checkOff ○

#globaldefine @line ----------------------------------------

/*-----------------------------------------------------------------------------
  内部トランスレート
-----------------------------------------------------------------------------*/
OnTranslateInternal
{
	_text = _argv[0]
	_text = TextOnlyTranslator(_text,'TextOnlyTranslatorFunc')
	_text
}

TextOnlyTranslator
{
	_string = RE_SPLIT(_argv[0],'\\(\\|q\[.*?\]\[.*?\]|[!&8cfijmpqsn]\[.*?\]|[-*+014567bcehntuvxz]|_[ablmsuvw]\[.*?\]|__(t|[qw]\[.*?\])|_[!?+nqsV]|[sipw][0-9])')
	_n = ARRAYSIZE(_string)
	_tag = RE_GETSTR()
	_tr = ''
	_qs = 0

	for _i = 0 ; _i < _n ; _i++ {
		_tr += EVAL("%(_argv[1])('%(_string[_i])',%(_qs))")
		_tr += _tag[_i]
		if '\_q' _in_ _tag[_i] {
			_qs = ! _qs
		}
	}

	_tr
}

TextOnlyTranslatorFunc
{
	//_argv[0] = 置換対象テキスト
	//_argv[1] = クイックセクション内か否か

	_text = _argv[0]
	if ! _argv[1] {
		_text = REPLACE(_text,"、","、\w9\w4")
		_text = REPLACE(_text,"。","。\w9\w9")
		_text = REPLACE(_text,"…","…\w9\w4")
		_text = REPLACE(_text,"―","―\w9\w4")
		_text = RE_REPLACE(_text ,'\n(?=[^\[])', '\w9\w4\n')
		_text = RE_REPLACE(_text ,'！(?=[^！？）」])', '！\w9\w9　')
		_text = RE_REPLACE(_text ,'？(?=[^！？）」])', '？\w9\w9　')
	}
	_text
}

/*-----------------------------------------------------------------------------
 ユーザ誕生日取得
-----------------------------------------------------------------------------*/
SetUserBirthday
{
	_i = SPLIT(userbd,'/')
	userbdmonth = _i[0]
	userbdday = _i[1]
}

/*-----------------------------------------------------------------------------
  バルーンや入力ボックスなどを閉じる
-----------------------------------------------------------------------------*/
Cancel
{
	"\1\b[-1]\0\b[-1]\![close,inputbox,__SYSTEM_ALL_INPUT__]\e"
}

/*-----------------------------------------------------------------------------
  フィードバックを送る
-----------------------------------------------------------------------------*/
OnInputFeedback
{
  _content = "ご意見ご感想など、フィードバックをお待ちしております"
  _id      = 'OnConfirmFeedback'
	InputFeedback(_content,_id)
}

OnConfirmFeedback
{
  _ref     = reference[0]
  _content = "以下の内容で送信されます"
  _id      = 'OnSendFeedback'
  ConfirmFeedback(_ref,_content,_id)
}

OnSendFeedback
{
  _content = reference[0]
  _category = 'フィードバック'
  _id = 'OnExecuteSendFeedback'
  SendFeedback(_content,_category,_id)
}

OnExecuteSendFeedback
{
  "\1\s[10]\_q（台詞を送信しました。次回の更新をお待ちください）\_q\e"
}

OnExecuteSendFeedbackFailure
{
  SendFeedbackFailure
}

/*-----------------------------------------------------------------------------
  フィードバック送信コア
-----------------------------------------------------------------------------*/
InputFeedback
{
	"\1\s[10]\_q（%(_argv[0])）\_q\_w[500]\![open,inputbox,%(_argv[1]),-1]\e"
}

ConfirmFeedback
{
	_content = EscapeDangerousTags(_argv[0])
	if (_content == '') {
		"\1\s[10]\_q（何も入力されていません）\_q\e"
	} else {
		"\1\s[10]\_q（%(_argv[1])）\_q\n[200%]/
		\_q「%(_content)」\_q\n[200%]/
		<b>[\q[送信する,%(_argv[2]),%(_content)]]　[\q[キャンセル,CancelSendFeedback]]</b>\e"
	}
}

SendFeedback
{
	_content    = _argv[0]
	_systempath = 'http://chikashi.org/nanika/feedback/wywue3ugz5.php'
	_ghostname  = SHIORI3FW.GhostName
	_sakuraname = "%selfname"
	_category   = _argv[1]
	_id         = _argv[2]

	"\1\s[10]\![execute,http-post,%(_systempath),--async=%(_id),--nodescript,--file=%(CHR(0x22))feedback.log%(CHR(0x22)),--param=ghostname=%(_ghostname)&sakuraname=%(_sakuraname)&category=%(_category)&message=%(_content),--timeout=5]\e"
}

SendFeedbackFailure
{
  "\1\s[10]\_q（送信に失敗しました）\_q\e"
}

CancelSendFeedback
{
	"\1\s[10]\_q（キャンセルしました）\_q\e"
}

/*-----------------------------------------------------------------------------
  気分を設定
-----------------------------------------------------------------------------*/
/*
実際に気分を返すのはGetMoodSlot。
1/5の確率でHigh
1/5の確率でNervous
3/5の確率でNormal
*/
SetMood
{
  mood = RAND(10)+1
}

/*-----------------------------------------------------------------------------
  感情値調整（--- 〜 +++）
  Ex: AdjustEmotion('love','++')
-----------------------------------------------------------------------------*/
AdjustEmotion
{
  _emotionname = _argv[0]

  //変数がなかった場合、作成する
  if (ISVAR(_emotionname) == 0) {
    LETTONAME(_emotionname,0)
  }

  _level = STRLEN(_argv[1])
  _value = 0

  case _level {
    when 1 { _value = 10 }
    when 2 { _value = 20 }
    when 3 { _value = 30 }
  }

  if ('+' _in_ _argv[1]) {
    LETTONAME(_emotionname,EVAL(_emotionname)+_value)
  } else {
    LETTONAME(_emotionname,EVAL(_emotionname)-_value)
  }

  //下限値0, 上限値500
  RoundEmotion(_emotionname,EVAL(_emotionname),0,500)
}

/*-----------------------------------------------------------------------------
  感情値を丸める
-----------------------------------------------------------------------------*/
RoundEmotion
{
  _emotionname = _argv[0]
  _value       = _argv[1]
  _minimum     = _argv[2]
  _highest     = _argv[3]

  //最低値以下だった場合、最低値に丸める
  if (_value < _minimum) { LETTONAME(_emotionname,_minimum) }
  //最高値以上だった場合、最高値に丸める
  if (_value > _highest) { LETTONAME(_emotionname,_highest) }
}

/*-----------------------------------------------------------------------------
  感情値チェック
-----------------------------------------------------------------------------*/
CheckEmotion
{
  //分岐しない場合はこっち
  mode = 'Normal'

  //分岐するときはこっち
//  if (love > 300) {
//    mode = 'Love'
//  } else {
//    mode = 'Normal'
//  }
}

